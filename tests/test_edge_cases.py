# tests/test_edge_cases.py

# –¢–µ—Ç—ã –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
# –ó–∞–ø—É—Å–∫ python tests/test_edge_cases.py

# tests/test_edge_cases.py

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ tools/
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import pandas as pd
import numpy as np
from tools.primary_feature_finder import primary_feature_finder
from tools.correlation_analysis import correlation_analysis
from tools.descriptive_stats_comparator import descriptive_stats_comparator
from tools.categorical_feature_analysis import categorical_feature_analysis
from tools.full_model_importance import full_model_importance


def test_missing_target_column():
    """–¢–µ—Å—Ç: —Ü–µ–ª–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö."""
    df = pd.DataFrame({"A": [1, 2], "B": [3, 4]})
    tools = [
        primary_feature_finder,
        correlation_analysis,
        descriptive_stats_comparator,
        categorical_feature_analysis,
        full_model_importance
    ]
    for tool in tools:
        result = tool(df, "target")
        assert result["status"] == "error", f"{tool.__name__} –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"
        assert "not found" in result["error_message"].lower(), f"–ù–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è 'not found': {result['error_message']}"
    print("‚úÖ –í—Å–µ —Ç—É–ª–∑—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")


def test_empty_dataframe():
    """–¢–µ—Å—Ç: –ø—É—Å—Ç–æ–π DataFrame (–Ω–µ—Ç —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤)."""
    df = pd.DataFrame()
    tools = [
        primary_feature_finder,
        correlation_analysis,
        descriptive_stats_comparator,
        categorical_feature_analysis,
        full_model_importance
    ]
    for tool in tools:
        result = tool(df, "target")
        assert result["status"] == "error", f"{tool.__name__} –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ –ø—É—Å—Ç–æ–º DataFrame"
    print("‚úÖ –í—Å–µ —Ç—É–ª–∑—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø—É—Å—Ç–æ–π DataFrame")


def test_single_column_dataframe():
    """–¢–µ—Å—Ç: DataFrame —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–Ω–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)."""
    df = pd.DataFrame({"target": [0, 1, 0, 1]})
    tools = [
        primary_feature_finder,
        correlation_analysis,
        descriptive_stats_comparator,
        categorical_feature_analysis,
        full_model_importance
    ]
    for tool in tools:
        result = tool(df, "target")
        assert result["status"] == "error", f"{tool.__name__} –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"
        
        # –ì–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–¥–æ–π–¥—É—Ç –ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        error_msg = result["error_message"].lower()
        assert any(keyword in error_msg for keyword in [
            "feature", "–ø—Ä–∏–∑–Ω–∞–∫", "column", "—Å—Ç–æ–ª–±–µ—Ü", "only target", "dataset has only"
        ]), f"–û—à–∏–±–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {result['error_message']}"
    print("‚úÖ –í—Å–µ —Ç—É–ª–∑—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")


def test_non_binary_target():
    """–¢–µ—Å—Ç: —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –±–∏–Ω–∞—Ä–Ω–∞—è (3 –∫–ª–∞—Å—Å–∞)."""
    df = pd.DataFrame({
        "feature": [1, 2, 3, 4, 5],
        "target": [0, 1, 2, 0, 1]  # 3 –∫–ª–∞—Å—Å–∞
    })
    tools = [
        correlation_analysis,
        primary_feature_finder,
        full_model_importance
    ]
    for tool in tools:
        result = tool(df, "target")
        assert result["status"] == "error", f"{tool.__name__} –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –Ω–∞ –Ω–µ-–±–∏–Ω–∞—Ä–Ω–æ–π —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"
        assert any(keyword in result["error_message"].lower() for keyword in [
            "binary", "not binary", "–¥–≤–æ–∏—á–Ω–∞—è", "–±–∏–Ω–∞—Ä–Ω–∞—è"
        ]), f"–û—à–∏–±–∫–∞ –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å –±–∏–Ω–∞—Ä–Ω–æ—Å—Ç—å—é: {result['error_message']}"
    print("‚úÖ –¢—É–ª–∑—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –Ω–µ-–±–∏–Ω–∞—Ä–Ω—É—é —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é")


def test_numeric_only_for_correlation():
    """–¢–µ—Å—Ç: –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ‚Äî correlation_analysis –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É."""
    df = pd.DataFrame({
        "category": ["A", "B", "A", "B"],
        "target": [0, 1, 0, 1]
    })
    result = correlation_analysis(df, "target")
    assert result["status"] == "error"
    assert any(k in result["error_message"].lower() for k in ["numeric", "—á–∏—Å–ª–æ–≤—ã–µ"])
    print("‚úÖ correlation_analysis –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")


def test_categorical_only_for_categorical_analysis():
    """–¢–µ—Å—Ç: –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ‚Äî categorical_feature_analysis –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É."""
    df = pd.DataFrame({
        "num1": [1.0, 2.0, 3.0],
        "num2": [4, 5, 6],
        "target": [0, 1, 0]
    })
    result = categorical_feature_analysis(df, "target")
    assert result["status"] == "error"
    assert any(k in result["error_message"].lower() for k in ["categorical", "–∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ"])
    print("‚úÖ categorical_feature_analysis –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")


def test_all():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    test_missing_target_column()
    test_empty_dataframe()
    test_single_column_dataframe()
    test_non_binary_target()
    test_numeric_only_for_correlation()
    test_categorical_only_for_categorical_analysis()
    print("\nüéâ –í—Å–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")


if __name__ == "__main__":
    test_all()