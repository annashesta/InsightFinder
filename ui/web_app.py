# web_app.py

import streamlit as st
import pandas as pd
from core.pipeline import analyze_dataset
import os
import glob
import base64
import io

st.title("InsightFinder ‚Äî AI –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")

file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"])
if file:
    df = pd.read_csv(file)
    st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:", df.head())

    target_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–≥–µ—Ç", df.columns)

    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
        os.makedirs("tmp", exist_ok=True)
        tmp_path = os.path.join("tmp", file.name)

        with open(tmp_path, "wb") as f:
            f.write(file.getbuffer())

        # —Å–æ–∑–¥–∞—ë–º "–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä" –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        status_placeholder = st.empty()
        status_placeholder.info("‚è≥ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω...")

        report_path, history, report = analyze_dataset(tmp_path, target_col)

        status_placeholder.empty()

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
        st.session_state["report"] = report
        st.session_state["report_path"] = report_path
        st.session_state["history"] = history


# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
if "history" in st.session_state:
    for step in st.session_state["history"]:
        if step["tool_name"] == "DistributionVisualizer" and step["status"] == "success":
            visualizations = step["details"].get("visualizations", {})
            if visualizations:
                st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
                for feature, viz in visualizations.items():
                    st.markdown(f"**{feature}** ‚Äî {viz['description']}")
                    # –¥–µ–∫–æ–¥–∏—Ä—É–µ–º Base64 –≤ –±–∞–π—Ç—ã
                    img_bytes = base64.b64decode(viz["image_base64"])
                    st.image(io.BytesIO(img_bytes), use_container_width=True)



# –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –∏ –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
if "report" in st.session_state:
    st.subheader("üìë –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç")
    st.markdown(st.session_state["report"], unsafe_allow_html=True)

    with open(st.session_state["report_path"], "r", encoding="utf-8") as f:
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (.md)",
            data=f.read(),
            file_name=os.path.basename(st.session_state["report_path"]),
            mime="text/markdown"
        )

    st.subheader("üìú –õ–æ–≥–∏ –∞–≥–µ–Ω—Ç–æ–≤")

    log_files = glob.glob("logs/*.log")

    if log_files:
        for log_file in log_files:
            with open(log_file, "r", encoding="utf-8") as f:
                st.download_button(
                    label=f"üì• –°–∫–∞—á–∞—Ç—å {os.path.basename(log_file)}",
                    data=f.read(),
                    file_name=os.path.basename(log_file),
                    mime="text/plain"
                )