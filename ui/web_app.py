# # web_app.py —Ä–µ–∑–µ—Ä–≤–Ω—ã–π UI

# import streamlit as st
# import pandas as pd
# from core.pipeline import analyze_dataset
# import os
# import glob
# import base64
# import io
# import zipfile
# from core.logger import get_logger
# from pathlib import Path

# try:
#     from openai import OpenAI
#     OPENAI_AVAILABLE = True
# except ImportError:
#     OPENAI_AVAILABLE = False
#     st.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'openai' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏: `pip install openai`")


# logger = get_logger(__name__, "orchestrator.log")


# # CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
# st.markdown(
#     """
#     <style>
#     /* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ */
#     .logo-container {
#         display: flex;
#         justify-content: center;
#         width: 100%;
#         margin-bottom: 1rem;
#     }
    
#     @media print {
#         /* –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ PDF */
        
#         /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑—Ä—ã–≤—ã —Å—Ç—Ä–∞–Ω–∏—Ü –≤–Ω—É—Ç—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏—Ö –ø–æ–¥–ø–∏—Å–µ–π */
#         .element-container:has(> img), /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Streamlit */
#         .stImage, /* –ö–ª–∞—Å—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Streamlit */
#         .stImage + div { /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥–ø–∏—Å–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å */ 
#              /* orphans –∏ widows - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ CSS —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏ */
#             orphans: 2; /* –ú–∏–Ω–∏–º—É–º 2 –ª–∏–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞/—ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ —Ä–∞–∑—Ä—ã–≤–∞ */
#             widows: 2;  /* –ú–∏–Ω–∏–º—É–º 2 –ª–∏–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞/—ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ —Ä–∞–∑—Ä—ã–≤–∞ */
            
#             /* page-break-inside - —É—Å—Ç–∞—Ä–µ–ª–æ, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª—É—á—à–µ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö */
#             page-break-inside: avoid; 
#             /* break-inside - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç */
#             break-inside: avoid;
#         }

#         /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–µ–ª–∏–∫–∏ */
#         /* .stImage img { max-width: 90%; } */
        
#         /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º */
#         /* .stImage + div { page-break-before: avoid; break-before: avoid; } */
#     }
#     </style>
#     """,
#     unsafe_allow_html=True
# )



# st.markdown('<div class="logo-container">', unsafe_allow_html=True)
# st.image("insightFinderLogo.png", width=600)
# st.markdown('</div>', unsafe_allow_html=True)
# st.title("InsightFinder ‚Äî AI –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
# # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫

# def clear_tmp_directory():
#     """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é tmp"""
#     try:
#         tmp_dir = "tmp"
#         if os.path.exists(tmp_dir):
#             for file in os.listdir(tmp_dir):
#                 file_path = os.path.join(tmp_dir, file)
#                 try:
#                     if os.path.isfile(file_path):
#                         os.unlink(file_path)
#                 except Exception as e:
#                     st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path}: {e}")
#     except Exception as e:
#         st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ tmp: {e}")



# st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
# st.write("–í–∞–∂–Ω–æ: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –æ—à–∏–±–∫–∞–º.")

# # –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º session_state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session_state –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏–ª–∏ –∑–¥–µ—Å—å, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
# if "available_models" not in st.session_state:
#     st.session_state["available_models"] = []
# if "selected_model" not in st.session_state:
#     # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ .env –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
#     st.session_state["selected_model"] = os.getenv("OPENAI_MODEL", "qwen2.5-32b-instruct")
# # –¢–∞–∫–∂–µ —Ö—Ä–∞–Ω–∏–º API –∫–ª—é—á –∏ URL –≤ session_state –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã
# if "tmp_api_key" not in st.session_state:
#     st.session_state["tmp_api_key"] = os.getenv("OPENAI_API_KEY", "")
# if "tmp_base_url" not in st.session_state:
#     st.session_state["tmp_base_url"] = os.getenv("OPENAI_BASE_URL", "https://openai-hub.neuraldeep.tech")

# with st.form("env_form"):
#     api_key = st.text_input(
#         "–í–≤–µ–¥–∏—Ç–µ OPENAI_API_KEY", 
#         type="password", 
#         key="api_key_input",
#         value=st.session_state["tmp_api_key"] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ session_state
#     )
#     # –û–±–Ω–æ–≤–ª—è–µ–º session_state –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
#     st.session_state["tmp_api_key"] = api_key 

#     base_url = st.text_input(
#         "–í–≤–µ–¥–∏—Ç–µ OPENAI_BASE_URL", 
#         value=st.session_state["tmp_base_url"], # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ session_state
#         key="base_url_input"
#     )
#     # –û–±–Ω–æ–≤–ª—è–µ–º session_state –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
#     st.session_state["tmp_base_url"] = base_url

#     # –ö–Ω–æ–ø–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Submit –∫–Ω–æ–ø–∫–æ–π
#     fetch_models_clicked = st.form_submit_button("üîÑ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
    
#     # –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã
#     if fetch_models_clicked:
#         if not api_key or not base_url:
#              st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –∏ URL.")
#         else:
#             if OPENAI_AVAILABLE:
#                 try:
#                     # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –≤–∏–¥–∂–µ—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã
#                     client = OpenAI(api_key=api_key, base_url=base_url.rstrip('/') + "/v1")
#                     models_response = client.models.list()
#                     model_ids = [model.id for model in models_response.data]
#                     if model_ids:
#                         st.session_state["available_models"] = sorted(model_ids)
#                         # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
#                         if st.session_state["selected_model"] not in model_ids:
#                             st.session_state["selected_model"] = model_ids[0]
#                         st.success(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(model_ids)} –º–æ–¥–µ–ª–µ–π.")
#                         # st.rerun() –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º, 
#                         # –ø–æ—ç—Ç–æ–º—É –æ–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
#                     else:
#                         st.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç.")
#                 except Exception as e:
#                     st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
#             else:
#                 st.error("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'openai' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

#     # –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç/–µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
#     if st.session_state["available_models"]:
#         # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º selectbox
#         selected_model = st.selectbox(
#             "–í—ã–±–µ—Ä–∏—Ç–µ OPENAI_MODEL",
#             options=st.session_state["available_models"],
#             index=st.session_state["available_models"].index(st.session_state["selected_model"]) if st.session_state["selected_model"] in st.session_state["available_models"] else 0,
#             key="model_selectbox"
#         )
#         # –û–±–Ω–æ–≤–ª—è–µ–º session_state –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
#         st.session_state["selected_model"] = selected_model
#     else:
#         # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º text_input
#         selected_model = st.text_input(
#             "–í–≤–µ–¥–∏—Ç–µ OPENAI_MODEL", 
#             value=st.session_state["selected_model"], 
#             key="model_text_input"
#         )
#         # –û–±–Ω–æ–≤–ª—è–µ–º session_state –ø—Ä–∏ –≤–≤–æ–¥–µ
#         st.session_state["selected_model"] = selected_model

#     submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

#     if submitted:
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ selectbox/text_input
#         model_to_save = selected_model
        
#         with open(".env", "w", encoding="utf-8") as f:
#             f.write(f"OPENAI_API_KEY={api_key}\n")
#             f.write(f"OPENAI_BASE_URL={base_url}\n")
#             f.write(f"OPENAI_MODEL={model_to_save}\n") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        
#         st.success("‚úÖ –§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
#         logger.info("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (API –∏ MODEL) –∏–∑ —Ñ–æ—Ä–º—ã.")

#         # —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
#         os.environ["OPENAI_API_KEY"] = api_key
#         os.environ["OPENAI_BASE_URL"] = base_url
#         os.environ["OPENAI_MODEL"] = model_to_save # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å


# file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"])

# st.write("–í–∞–∂–Ω–æ: –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Ç–∞—Ä–≥–µ—Ç, –ø–æ–∫–∞ –∏–¥—ë—Ç —Ç–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º.")
# if file:
#     logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.")
#     df = pd.read_csv(file)
#     st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:", df.head())

#     target_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–≥–µ—Ç", sorted(df.columns))
    
#     st.write("–í–∞–∂–Ω–æ: –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑, –ø–æ–∫–∞ –∏–¥—ë—Ç —Ç–µ–∫—É—â–∏–π. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º.")
    
#     def is_binary_column(series):
#         """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ—Ä–∏—è –±–∏–Ω–∞—Ä–Ω–æ–π (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è)."""
#         try:
#             # –£–¥–∞–ª—è–µ–º NaN, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
#             unique_values = series.dropna().unique()
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ä–æ–≤–Ω–æ 2
#             if len(unique_values) != 2:
#                 return False, []
            
#             # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è 0/1, True/False, Yes/No –∏ —Ç.–ø.
#             # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
#             return True, unique_values.tolist()
#         except Exception:
#             return False, []

#     if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∏–Ω–∞—Ä–Ω–æ—Å—Ç—å
#         is_binary, unique_vals = is_binary_column(df[target_col])
#         if not is_binary:
#             st.error(f"‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü '{target_col}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–∏–Ω–∞—Ä–Ω—ã–º. "
#                      f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å —Ä–æ–≤–Ω–æ –¥–≤—É–º—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.")
#             logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –Ω–µ –±–∏–Ω–∞—Ä–Ω—ã–º —Ç–∞—Ä–≥–µ—Ç–æ–º '{target_col}'. "
#                           f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {unique_vals}")
#         else:
#             # –ï—Å–ª–∏ —Ç–∞—Ä–≥–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ 
#             os.makedirs("tmp", exist_ok=True)
#             tmp_path = os.path.join("tmp", file.name)

#             with open(tmp_path, "wb") as f:
#                 f.write(file.getbuffer())

#             # —Å–æ–∑–¥–∞—ë–º "–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä" –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
#             status_placeholder = st.empty()
#             status_placeholder.info("‚è≥ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω...")

#             try:
#                 report_path, history, report = analyze_dataset(tmp_path, target_col)

#                 # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
#                 st.session_state["report"] = report
#                 st.session_state["report_path"] = report_path
#                 st.session_state["history"] = history

#             finally:
#                 status_placeholder.empty()
#                 # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
#                 clear_tmp_directory()
#                 logger.info("‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tmp –æ—á–∏—â–µ–Ω–∞.")


# def display_markdown_report(report_path, images_dir="report/output/images"):
#     """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç Markdown –æ—Ç—á–µ—Ç —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
#     try:
#         # –ß—Ç–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
#         with open(report_path, "r", encoding="utf-8") as f:
#             report_content = f.read()
        
#         # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
#         def embed_images(match):
#             alt_text = match.group(1)
#             img_filename = match.group(2)
            
#             # –ü–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
#             img_path = None
#             for root, dirs, files in os.walk(images_dir):
#                 if img_filename in files:
#                     img_path = os.path.join(root, img_filename)
#                     break
            
#             if img_path and os.path.exists(img_path):
#                 try:
#                     with open(img_path, "rb") as img_file:
#                         img_base64 = base64.b64encode(img_file.read()).decode()
#                     return f'![{alt_text}](data:image/png;base64,{img_base64})'
#                 except Exception as e:
#                     st.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {img_path}: {e}")
            
#             return match.group(0)  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        
#         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
#         import re
#         pattern = r'!\[(.*?)\]\(([^)]+)\)'
#         processed_content = re.sub(pattern, embed_images, report_content)
        
#         # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
#         st.markdown(processed_content, unsafe_allow_html=True)
        
#     except Exception as e:
#         st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        
# # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –∏ –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
# if "report_path" in st.session_state:
#     st.subheader("üìë –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏")
#     display_markdown_report(st.session_state["report_path"], images_dir="report/output/images")

#     image_paths = [] # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–Ω–µ–µ

#     # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
#     if "history" in st.session_state:
#         image_paths = []
    
#         # –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç DistributionVisualizer
#         for step in st.session_state["history"]:
#             if step["tool_name"] == "DistributionVisualizer" and step["status"] == "success":
#                 visualizations = step["details"].get("visualizations", {})
#                 if visualizations:
#                     st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
#                     for feature, viz in visualizations.items():
#                         st.markdown(f"**{feature}** ‚Äî {viz['description']}")
#                         img_bytes = base64.b64decode(viz["image_base64"])
                    
#                         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è ZIP
#                         temp_path = os.path.join("tmp", f"distribution_{feature}.png")
#                         with open(temp_path, 'wb') as f:
#                             f.write(img_bytes)
#                         image_paths.append(temp_path)
                    
#                         # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
#                         st.image(img_bytes, use_container_width=True)

#         # –õ–æ–≥–∏–∫–∞ –¥–ª—è InsightDrivenVisualizer
#         for step in st.session_state["history"]:
#             if step["tool_name"] == "InsightDrivenVisualizer" and step["status"] == "success":
#                 saved_plots = step["details"].get("saved_plots", {})
#                 if saved_plots:
#                     st.subheader("üí° –ò–Ω—Å–∞–π—Ç-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
                
#                     images_dir = "report/output/images/"
#                     if os.path.exists(images_dir):
#                         # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–µ–º –≤—Å–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∏ –∏—Ö "—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ" –∫–ª—é—á–∏ –∏–∑ details
#                         plot_info_map = {}
#                         for feature_key, plot_data in saved_plots.items():
#                              for plot_type_key, file_path in plot_data.items():
#                                  if plot_type_key != "description" and isinstance(file_path, str) and os.path.exists(file_path):
#                                      # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –∫–ª—é—á –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
#                                      normalized_path = os.path.normpath(file_path)
#                                      plot_info_map[normalized_path] = {
#                                          "feature": feature_key,
#                                          "type": plot_type_key,
#                                          "description": plot_data.get("description", "")
#                                      }
#                         for root, dirs, files in os.walk(images_dir):
#                             for file in files:
#                                 if file.lower().endswith(('.png', '.jpg', '.jpeg')):
#                                     img_path = os.path.join(root, file)
#                                     image_paths.append(img_path)
                                    
#                                     # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
#                                     caption_parts = [file] # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–º—è —Ñ–∞–π–ª–∞
#                                     norm_img_path = os.path.normpath(img_path)
#                                     if norm_img_path in plot_info_map:
#                                         info = plot_info_map[norm_img_path]
#                                         # –ü—Ä–∏–º–µ—Ä –ø–æ–¥–ø–∏—Å–∏: "desc_MonthlyRevenue_hist.png - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è MonthlyRevenue –∏–∑ DescriptiveStatsComparator (–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞)"
#                                         detailed_caption = f"{file} - {info['description']} ({info['type']})"
#                                         caption_parts = [detailed_caption]
                                        
#                                     # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
#                                     st.image(img_path, caption=" | ".join(caption_parts), use_container_width=True)

#     # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ 
#     st.subheader("üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç")
#     with open(st.session_state["report_path"], "r", encoding="utf-8") as f:
#         st.download_button(
#             label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (.md)",
#             data=f.read(),
#             file_name=os.path.basename(st.session_state["report_path"]),
#             mime="text/markdown"
#         )

#     # –°–æ–∑–¥–∞–µ–º ZIP-–∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
#     if image_paths:
#         # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
#         image_paths = list(set(image_paths)) 
#         st.markdown(f"### üì• –í—Å–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {len(image_paths)}")
#         zip_buffer = io.BytesIO()
#         with zipfile.ZipFile(zip_buffer, 'w') as zip_file:
#             for img_path in image_paths:
#                 # –ò–º—è —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤–µ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
#                 arcname = os.path.relpath(img_path, "report/output") 
#                 # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
#                 if os.path.exists(img_path):
#                      zip_file.write(img_path, arcname)
#                 else:
#                      logger.warning(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ZIP: {img_path}")
    
#         zip_buffer.seek(0)
#         st.download_button(
#             label="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ (.zip)",
#             data=zip_buffer,
#             file_name="visualizations.zip",
#             mime="application/zip"
#         )

#     st.subheader("üìú –õ–æ–≥–∏ –∞–≥–µ–Ω—Ç–æ–≤")

#     log_files = glob.glob("logs/*.log")

#     if log_files:
#         for log_file in log_files:
#             with open(log_file, "r", encoding="utf-8") as f:
#                 st.download_button(
#                     label=f"üì• –°–∫–∞—á–∞—Ç—å {os.path.basename(log_file)}",
#                     data=f.read(),
#                     file_name=os.path.basename(log_file),
#                     mime="text/plain"
#                 )
#     logger.info("‚úÖ –í—ã–≤–µ–¥–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")

#     st.markdown("---") # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
#     st.markdown(
#         "**–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ PDF:** –ù–∞–∂–º–∏—Ç–µ ‚ãÆ (—Ç—Ä–∏ —Ç–æ—á–∫–∏)"
#         "–≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ 'Print', –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ `Ctrl+P`."
#     )
