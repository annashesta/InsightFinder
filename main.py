# main.py

# "–ü–æ—Å–∫–æ–ª—å–∫—É —Å–µ—Ä–≤–µ—Ä API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç tool_choice="auto", –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤ –±—ã–ª —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ü–∏–∫–ª, 
# –≤ –∫–æ—Ç–æ—Ä–æ–º –ê–Ω–∞–ª–∏—Ç–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏, 
# –∞ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é. 
# –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã."

import pandas as pd
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from agents.tools_wrapper import set_current_data, ALL_TOOLS
from agents.summarizer_agent import generate_summary
import os

load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv("data/telecom_eda_data.csv")
set_current_data(df, "Churn")

# LLM
llm = ChatOpenAI(
    model="qwen2.5-32b-instruct",
    api_key=os.getenv("OPENAI_API_KEY"),
    base_url=os.getenv("OPENAI_BASE_URL"),
    temperature=0.0
)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
prompt = ChatPromptTemplate.from_messages([
    ("system", """
–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫. –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º:
{tool_names}

–ü–ª–∞–Ω:
1. –ó–∞–ø—É—Å—Ç–∏ PrimaryFeatureFinder
2. –ó–∞—Ç–µ–º CorrelationAnalysis –∏ DescriptiveStatsComparator
3. –ó–∞—Ç–µ–º CategoricalFeatureAnalysis
4. –í –∫–æ–Ω—Ü–µ ‚Äî FullModelFeatureImportance

–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ —è –±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
–ö–æ–≥–¥–∞ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã, —Å–∫–∞–∂–∏: "–ü–µ—Ä–µ–¥–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Summarizer".
"""),
    ("placeholder", "{messages}")
])

# –°–ª–æ–≤–∞—Ä—å: –∏–º—è —Ç—É–ª–∑–∞ ‚Üí —Ñ—É–Ω–∫—Ü–∏—è
tool_map = {tool.name: tool._run for tool in ALL_TOOLS}
tool_names = ", ".join(tool_map.keys())

# –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
messages = [{"role": "user", "content": f"–ù–∞—á–Ω–∏ –∞–Ω–∞–ª–∏–∑. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tool_names}"}]

# –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
results = []
for _ in range(6):  # –ú–∞–∫—Å–∏–º—É–º 6 —à–∞–≥–æ–≤
    chain = prompt | llm
    response = chain.invoke({"tool_names": tool_names, "messages": messages})
    msg = response.content.strip()
    print(f"üß† –ê–Ω–∞–ª–∏—Ç–∏–∫: {msg}")

    # –ï—Å–ª–∏ —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –æ—Ç—á—ë—Ç
    if "summarizer" in msg.lower() or "–≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã" in msg.lower():
        break

    # –ü–æ–∏—Å–∫, –∫–∞–∫–æ–π —Ç—É–ª–∑ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å
    chosen_tool = None
    for name in tool_map:
        if name in msg:
            chosen_tool = name
            break

    if chosen_tool:
        print(f"üîß –ó–∞–ø—É—Å–∫: {chosen_tool}")
        result = tool_map[chosen_tool]()
        results.append(f"### {chosen_tool}\n{result}")
        messages.append({"role": "assistant", "content": msg})
        messages.append({"role": "user", "content": f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {chosen_tool}:\n{result}"})
    else:
        messages.append({"role": "assistant", "content": msg})
        messages.append({"role": "user", "content": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å. –£—Ç–æ—á–Ω–∏."})

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
full_results = "\n\n".join(results)
summary = generate_summary(full_results, "telecom_eda_data.csv")

with open("report.md", "w", encoding="utf-8") as f:
    f.write(summary)

print("‚úÖ –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: report.md")