# agents/executor_agent.py
from langchain.agents import AgentExecutor
from langchain_openai import ChatOpenAI
from langchain.agents import create_tool_calling_agent

from core.logger import get_logger

logger = get_logger(__name__)


class ExecutorAgent:
    """
    –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –≤—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∏–º–µ–Ω–∏.
    –ó–¥–µ—Å—å –Ω–µ—Ç LLM, —Ç–æ–ª—å–∫–æ –º–∞–ø–ø–∏–Ω–≥ tool_name -> —Ñ—É–Ω–∫—Ü–∏—è.
    """

    def __init__(self, tools):
        self.tools = {t.name: t for t in tools}
        logger.info(f"Executor Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏")

    def run_one_step(self, tool_name: str, **kwargs):
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —à–∞–≥: –≤—ã–∑–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏
        """
        if tool_name not in self.tools:
            raise ValueError(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")

        tool = self.tools[tool_name]
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_name}")
        return tool.run(tool_input="", **kwargs)
