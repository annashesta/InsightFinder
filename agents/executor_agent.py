# agents/executor_agent.py
from core.logger import get_logger
from core.utils import make_serializable

logger = get_logger(__name__, "executor.log")


class ExecutorAgent:
    def __init__(self, tools):
        self.tools = {t.name: t for t in tools}
        logger.info(f"Executor Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏")

    def run_one_step(self, tool_name: str, **kwargs):
        if tool_name not in self.tools:
            raise ValueError(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        tool = self.tools[tool_name]
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_name}")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ kwargs, –≤–∫–ª—é—á–∞—è df, target_column –∏ history
        try:
            result = tool.run(tool_input="", **kwargs)
            logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}: {e}")
            result = {
                "tool_name": tool_name,
                "status": "error",
                "summary": "",
                "details": {},
                "error_message": str(e)
            }
        return make_serializable(result)
