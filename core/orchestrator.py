# # core/orchestrator.py
# from typing import List, Dict
# from agents.tools_wrapper import ALL_TOOLS

# def run_analysis_pipeline(df, target_column: str) -> List[Dict]:
#     """
#     –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
#     """
#     from agents.tools_wrapper import set_current_data
#     set_current_data(df, target_column)

#     results = []
#     for tool in ALL_TOOLS:
#         print(f"üîß –ó–∞–ø—É—Å–∫: {tool.name}")
#         try:
#             result = tool._run()
#             results.append(result)
#         except Exception as e:
#             results.append({
#                 "tool_name": tool.name,
#                 "status": "error",
#                 "summary": "",
#                 "details": {},
#                 "error_message": str(e)
#             })
#     return results


# orchestrator.py
from agents.analyst_agent import create_analyst_agent
from agents.tools_wrapper import set_current_data, ALL_TOOLS
from agents.executor_agent import ExecutorAgent
from langchain_core.messages import HumanMessage
import pandas as pd
import json
from core.logger import get_logger
from agents.summarizer_agent import generate_summary

logger = get_logger(__name__)

def run_simple_orchestration(df: pd.DataFrame, target_column: str, filename: str = "data.csv"):
    """
    –õ—ë–≥–∫–∞—è –≤–µ—Ä—Å–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    - –ü–æ–ª—É—á–∞–µ—Ç –µ–≥–æ –æ—Ç–≤–µ—Ç
    """
     # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç—É–ª–∑—ã
    set_current_data(df, target_column)

    # 2. –°–æ–∑–¥–∞—ë–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    analyst = create_analyst_agent(ALL_TOOLS)
    executor = ExecutorAgent(tools=ALL_TOOLS)

    history = []   # –∏—Å—Ç–æ—Ä–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    insights = []  # —Å—é–¥–∞ –º–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)

    while True:
        # === 1. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ===
        if not history:
            question = f"""
            –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
            –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown-–æ–±—ë—Ä—Ç–∫—É.

            –¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
            –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏ –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ –±–∏–Ω–∞—Ä–Ω–æ–π —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.

            –ù–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ –≤—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ –û–î–ò–ù –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –Ω–∞—á–Ω—ë—à—å –∞–Ω–∞–ª–∏–∑.

            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
            {{
              "logic": "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —à–∞–≥ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º.",
              "next_step": {{"tool": "<–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞>", "reason": "–∑–∞—á–µ–º –µ–≥–æ –∑–∞–ø—É—Å–∫–∞—Ç—å"}}
            }}
            """
        else:
            question = f"""
            –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
            –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown-–æ–±—ë—Ä—Ç–∫—É.

            –¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
            –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –ø—Ä–∏–ª–æ–∂–µ–Ω—ã –Ω–∏–∂–µ.

            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
            {{
              "logic": "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —à–∞–≥ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å (–æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã).",
              "next_step": {{"tool": "<–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞>", "reason": "–∑–∞—á–µ–º –µ–≥–æ –∑–∞–ø—É—Å–∫–∞—Ç—å"}}
            }}

            –í–ê–ñ–ù–û:
            - –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
            - –ï—Å–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–≥–∏ —É–∂–µ —Å–¥–µ–ª–∞–Ω—ã, –≤–º–µ—Å—Ç–æ "next_step" –≤–µ—Ä–Ω–∏:
              {{"tool": "STOP", "reason": "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã."}}

            --- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤ ---
            {json.dumps(history, ensure_ascii=False, indent=2)}
            """

        # === 2. –û—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ===
        response = analyst.invoke({
            "messages": [HumanMessage(content=question)],
            "agent_scratchpad": []
        })

        print("=== –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ===")
        print(response)

        # === 3. –ü–∞—Ä—Å–∏–º JSON ===
        try:
            parsed = json.loads(response.content)
            step = parsed["next_step"]
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:", e)
            break

        # === 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ STOP ===
        if step["tool"] == "STOP":
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.")
            break

        # === 5. –ó–∞–ø—É—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ===
        result = executor.run_one_step(step["tool"], df=df, target_column=target_column)

        print("=== –†–µ–∑—É–ª—å—Ç–∞—Ç –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ===")
        print(result)

        # === 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ===
        history.append({
            "tool_name": result["tool_name"],
            "status": result["status"],
            "summary": result["summary"],
            "details": result["details"]
        })

        # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –º–æ–∂–Ω–æ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã –∏–∑ summary –∏ –∫–ª–∞—Å—Ç—å –≤ insights
        insights.append(result["summary"])

    # === 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ —á–µ—Ä–µ–∑ SummarizerAgent ===
    final_report = generate_summary(
        insights=insights,
        tool_results=history,
        filename=filename
    )

    return history, final_report

def run_one_step(analyst, executor: ExecutorAgent, df, target_column):
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ—Ç Analyst
    response = analyst.invoke({
        "messages": [
            {"role": "user", "content": "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON"}
        ],
        "agent_scratchpad": []
    })
    
    try:
        step = json.loads(response.content)["next_step"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: {response.content}")
        return None, {"status": "error", "error_message": str(e)}

    tool_name = step.get("tool")
    args = {"df": df, "target_column": target_column}

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–≥ –≤ Executor
    result = executor.run_one_step(tool_name, **args)

    return step, result