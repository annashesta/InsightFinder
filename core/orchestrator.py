# core/orchestrator.py
import json
from typing import Tuple, List, Dict, Any

import pandas as pd
from langchain_core.messages import HumanMessage

from agents.analyst_agent import create_analyst_agent
from agents.executor_agent import ExecutorAgent
from agents.summarizer_agent import generate_summary
from agents.tools_wrapper import set_current_data, ALL_TOOLS
from core.logger import get_logger
from core.utils import make_serializable

logger = get_logger(__name__, "orchestrator.log")


def run_simple_orchestration(
    df: pd.DataFrame, 
    target_column: str, 
    filename: str = "data.csv"
) -> Tuple[List[Dict[str, Any]], str]:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: —Ä–∞–±–æ—Ç–∞–µ—Ç —Å JsonOutputParser.
    
    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        target_column: –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    """
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    set_current_data(df, target_column)

    analyst = create_analyst_agent(ALL_TOOLS)
    executor = ExecutorAgent(ALL_TOOLS)
    logger.info("–ê–≥–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    history: List[Dict[str, Any]] = []
    insights: List[str] = []

    step_num = 1
    max_steps = 20
    while step_num <= max_steps:
        logger.info(f"–®–∞–≥ {step_num}: –∑–∞–ø—Ä–æ—Å –∫ Analyst Agent")

        if not history:
            question = "–ù–∞—á–Ω–∏ –∞–Ω–∞–ª–∏–∑ —Å PrimaryFeatureFinder."
        else:
            serializable_history = make_serializable(history)
            history_json = json.dumps(serializable_history, ensure_ascii=False, indent=2)
            question = (
                "–£—á–∏—Ç—ã–≤–∞–π –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n\n"
                f"--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤ ---\n{history_json}"
            )

        try:
            response = analyst.invoke({
                "messages": [HumanMessage(content=question)],
                "agent_scratchpad": []
            })
            logger.info(f"‚úÖ Analyst –≤–µ—Ä–Ω—É–ª: {response}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Analyst: {e}")
            step_num += 1
            continue

        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        next_step_data = None
        try:
            if isinstance(response, dict):
                if "next_step" in response and isinstance(response["next_step"], dict):
                    next_step_data = response["next_step"]
                elif "tool" in response and "reason" in response:
                    logger.warning("Analyst –≤–µ—Ä–Ω—É–ª next_step –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –≤ –ø–æ–ª–µ 'next_step'. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å.")
                    next_step_data = response
                else:
                    logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Analyst: {response}")
            else:
                logger.error(f"‚ùå –û—Ç–≤–µ—Ç Analyst –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {response}")

        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ Analyst: {e}")

        if not next_step_data:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å next_step. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥.")
            step_num += 1
            continue
            
        try:
            tool_name = next_step_data["tool"]
            logger.info(f"üîç Analyst –≤—ã–±—Ä–∞–ª: {tool_name}")
        except KeyError:
            logger.error(f"‚ùå –í next_step –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'tool': {next_step_data}")
            step_num += 1
            continue

        # STOP
        if tool_name.upper() == "STOP":
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: {next_step_data.get('reason', '–û–∫–æ–Ω—á–∞–Ω–∏–µ')}")
            break

        # –ó–∞–ø—É—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: –æ—Å–Ω–æ–≤–Ω—ã–µ + –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tool_kwargs = {
            "df": df,
            "target_column": target_column
        }
            
        try:
            result = executor.run_one_step(tool_name, **tool_kwargs)
            logger.info(f"üöÄ Executor –≤—ã–ø–æ–ª–Ω–∏–ª {tool_name}: —Å—Ç–∞—Ç—É—Å={result['status']}")
            if result["status"] == "error":
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result['error_message']}")
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {tool_name}: {e}")
            result = {
                "tool_name": tool_name,
                "status": "error",
                "summary": "",
                "details": {},
                "error_message": str(e),
            }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        history.append({
            "tool_name": result["tool_name"],
            "status": result["status"],
            "summary": result["summary"],
            "details": make_serializable(result["details"]),
        })

        if result["status"] == "success":
            insights.append(result["summary"])

        step_num += 1
    else:
        logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —à–∞–≥–æ–≤ ({max_steps}). –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞.")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ InsightDrivenVisualizer
    logger.info("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ InsightDrivenVisualizer")
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä—è–º–æ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from tools.insight_driven_visualizer import insight_driven_visualizer

        # –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É –∏—Å—Ç–æ—Ä–∏—é
        insight_result = insight_driven_visualizer(
            df=df,
            target_column=target_column,
            analysis_results=history, # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
            output_dir="report/output/images"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é, –∫–∞–∫ –±—É–¥—Ç–æ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–ª –∞–≥–µ–Ω—Ç
        history.append({
            "tool_name": insight_result["tool_name"],
            "status": insight_result["status"],
            "summary": insight_result["summary"],
            "details": make_serializable(insight_result["details"]),
        })
        if insight_result["status"] == "success":
            insights.append(insight_result["summary"])
        logger.info(f"‚úÖ InsightDrivenVisualizer –≤—ã–ø–æ–ª–Ω–µ–Ω: —Å—Ç–∞—Ç—É—Å={insight_result['status']}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–ø—É—Å–∫–µ InsightDrivenVisualizer: {e}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # history.append({...})

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    logger.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
    final_report = generate_summary(insights=insights, tool_results=history, filename=filename)

    return history, final_report
