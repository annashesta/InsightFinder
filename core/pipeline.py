# pipeline.py

from core.data_loader import load_data
from core.utils import make_target_binary, find_binary_target
from core.orchestrator import run_simple_orchestration
from report.generate_report import save_report
import os


def analyze_dataset(data_path: str, target_column: str | None = None, filename: str | None = None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.

    Args:
        data_path: –ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É.
        target_column: –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –ï—Å–ª–∏ None, –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞. –ï—Å–ª–∏ None, –±—É–¥–µ—Ç –≤–∑—è—Ç–æ –∏–∑ data_path.

    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–ø—É—Ç—å_–∫_–æ—Ç—á–µ—Ç—É, –∏—Å—Ç–æ—Ä–∏—è, —Ç–µ–∫—Å—Ç_–æ—Ç—á–µ—Ç–∞) –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    if not os.path.exists(data_path):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_path}")

    print(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {data_path}...")
    df = load_data(data_path)

    # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è –ø—É—Ç–∏
    if filename is None:
        filename = os.path.basename(data_path)
        print(f"üìÑ –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞: '{filename}'")

    if target_column is None:
        print("üîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω–æ–π —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π...")
        target_column = find_binary_target(df)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: '{target_column}'")
    else:
        if target_column not in df.columns:
            raise ValueError(f"–°—Ç–æ–ª–±–µ—Ü '{target_column}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: '{target_column}'")

    try:
        df = make_target_binary(df, target_column)
        print(f"‚úÖ –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{target_column}' –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ 0/1.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {e}")
        return

    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
    history, final_report = run_simple_orchestration(
        df=df,
        target_column=target_column,
        filename=filename
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º report_path, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    report_path = None
    try:
        report_path = save_report(final_report)
        print(f"\n‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
        # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–¥–µ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—Ç—á–µ—Ç

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º report_path (–º–æ–∂–µ—Ç –±—ã—Ç—å None), –∏—Å—Ç–æ—Ä–∏—é –∏ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    return report_path, history, final_report
